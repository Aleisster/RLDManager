using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RLDManager
{
    public class RLD
    {
        private bool Status = false;
        private byte[] Script;
        public Encoding SJIS = Encoding.GetEncoding(932);
        uint[] Offsets;
        uint[] Lenghts;
        public RLD(byte[] Script) {
            this.Script = Script;
        }

        public string[] Import() {
            if (!Status) {
                XOR(ref Script);
                Status = true;
            }
            Offsets = new uint[0];
            for (uint i = 0; i < Script.Length; i++) {
                Result Info = Scan(i);
                if (!Info.Valid)
                    continue;

                //Save offset
                Array.Resize(ref Offsets, Offsets.Length + 1);
                Offsets[Offsets.Length - 1] = i + Info.StrIndx;
                
                if (Info.Custom) { //Double String Entry~
                    //Detect Ends of the first string
                    uint RealOffset = i + Info.StrIndx;
                    while (Script[RealOffset++] != 0x00)
                        continue;
                    
                    //Save offset
                    Array.Resize(ref Offsets, Offsets.Length + 1);
                    Offsets[Offsets.Length - 1] = RealOffset;
                }
            }
            //Initialize Variables
            string[] Strs = new string[Offsets.Length];
            Lenghts = new uint[Offsets.Length];

            for (int i = 0; i < Strs.Length; i++) {
                //Initialize String Variables
                byte[] Buff = new byte[0];
                uint Pos = Offsets[i];

                //Copy String
                while (Script[Pos] != 0x00) {
                    Array.Resize(ref Buff, Buff.Length + 1);
                    Buff[Buff.Length - 1] = Script[Pos++];
                }

                //Save String and Lenght
                Strs[i] = SJIS.GetString(Buff);
                Lenghts[i] = (uint)Buff.LongLength;
            }
            return Strs;
        }

        public byte[] Export(string[] Strings) {
            if (Strings.Length != Offsets.Length)
                throw new Exception("You Can't add new strings.");
            byte[] OutScript = new byte[Script.Length];
            Script.CopyTo(OutScript, 0);
            //Reverse Replace to don't need update offsets after a change.
            for (int i = Offsets.Length - 1; i >= 0; i--) {
                uint POS = Offsets[i];
                uint LEN = Lenghts[i];

                //Get Content Before the string
                byte[] Bef = GetRegion(OutScript, 0, POS);

                //Compile String
                byte[] Str = SJIS.GetBytes(Strings[i]);

                //Get Content After the string
                byte[] Aft = GetRegion(OutScript, POS + LEN, (uint)OutScript.LongLength - (POS + LEN));

                //Resize OutScript
                OutScript = new byte[Bef.LongLength + Aft.LongLength + Str.LongLength];

                //Merge Data
                Bef.CopyTo(OutScript, 0);
                Str.CopyTo(OutScript, Bef.LongLength);
                Aft.CopyTo(OutScript, Bef.LongLength + Str.LongLength);
            }
            //Encrypt and Return
            XOR(ref OutScript);
            return OutScript;
        }

        private byte[] GetRegion(byte[] From, uint Start, uint Lenght) {
            byte[] To = new byte[Lenght];
            for (uint i = Start; i - Start < Lenght; i++)
                To[i - Start] = From[i];
            return To;
        }

        private Result Scan(uint Pos) {
            //Initialize Variables
            Result res = new Result();
            uint StrIndex = 0;
            res.Valid = false;

            //Check if my mask is most smaller than reaming content in this pos
            if (Pos + Mask.Length + 4 < Script.Length) {
                //Get First 4 Bytes
                byte[] HDR = new byte[] { Script[Pos++], Script[Pos++], Script[Pos++], Script[Pos++] };

                //Check Possible Enties
                if ((HDR[0] & 0x0F) == 0x0E && HDR[2] == 0x04) { //0x?E??04
                    //+8 by format, +4 By Pos skip
                    StrIndex = (uint)Mask.LongLength + 12;
                    res.Valid = true;
                    res.Custom = true;
                }
                else
                if ((HDR[0] & 0x0F) == 0x0C && HDR[2] == 0x04) { //0x?C??04
                    //+4 By Pos skip
                    StrIndex = (uint)Mask.LongLength + 4;
                    res.Valid = true;
                    res.Custom = true;
                }
                else
                if ((HDR[0] & 0x0F) == 0x0C) {//0x?C???? - The Mask is too big, no problem ^^
                    //+2 by format, +4 By Pos skip
                    StrIndex = (uint)Mask.LongLength + 6;
                    res.Valid = true;
                    res.Custom = false;
                }
            }
            if (!res.Valid)
                return new Result() { Valid = false };

            for (uint i = 0; i < Mask.Length; i++) {
                //Get Variables
                byte b = Script[i + Pos];
                dynamic M = Mask[i];

                //Null = Any
                if (M == null)
                    continue;

                if (b != M) {
                    //System.IO.File.WriteAllBytes(AppDomain.CurrentDomain.BaseDirectory + "dump.rld", Script); //DEBUG - Dump Decrypted Script
                    res.Valid = false;
                    break;
                }
            }

            //the OP Mask 0x?C??04 can fail somethings, this confirm is not a single string entry
            if (Pos + StrIndex + 4 < Script.Length && Script[Pos + StrIndex - 4] == 0x2A && Script[Pos + StrIndex - 3] == 0x00 && res.Custom) {
                StrIndex += 2;
                res.Custom = false;
            }
            res.StrIndx = StrIndex;
            return res;
        }
        public void XOR(ref byte[] Content) {
            /*
             * This Encryption is based on 4 Bytes blocks
             * and the position of this block, srry if looks confuse
             * And finally is just a XOR, don't need Encryption Algorithm ^^
             */
            if (Content.Length > 0xFFCF)
                throw new Exception("Unsupported Script");
            uint Key = 0x20121203, BlockCount = (uint)Content.Length;
            BlockCount = BlockCount - (BlockCount % 4);
            for (uint i = 0x10, ri = 0; i < BlockCount; i += 4, ri++) {
                uint enc = GetDW(Content, i), tmp = GetDW(Keys, (ri & 0xFF) * 4) ^ Key;
                SetDWAt(ref Content, i, tmp ^ enc);
            }
        }

        struct Result {
            internal bool Valid;
            internal bool Custom;
            internal uint StrIndx;
        }

        //This Mask Don't Found all Strings of all Games of this Engine, plz Edit it to your Project.
        private readonly dynamic[] Mask = new dynamic[] { 0x00, 0x00, null, null, null, null, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        private readonly byte[] Keys = new byte[] { 0x14, 0x12, 0x61, 0x82, 0xD9, 0xE1, 0x36, 0x6D, 0x0A, 0x05, 0x0C, 0x6E, 0xD1, 0x4F, 0x8B, 0x3D, 0xAE, 0xA7, 0xB4, 0xFB, 0x31, 0x1C, 0x9C, 0x76, 0x49, 0x11, 0x4E, 0x54, 0xDA, 0x21, 0xCC, 0xFF, 0xE3, 0xC0, 0x6C, 0x7C, 0xDF, 0xAA, 0x45, 0x5D, 0x13, 0x76, 0x2B, 0x2B, 0xF1, 0x90, 0xA9, 0xF6, 0xC1, 0xCC, 0x4D, 0xFA, 0x3F, 0x36, 0x94, 0x72, 0x67, 0x2A, 0x63, 0x77, 0x4B, 0x33, 0xEB, 0x9A, 0x20, 0x0E, 0x58, 0x44, 0xDD, 0x4F, 0x01, 0x14, 0x2D, 0x6E, 0x6A, 0x84, 0x21, 0x6A, 0x34, 0x6A, 0xA0, 0xB1, 0x51, 0x0C, 0xE8, 0x22, 0xA7, 0xFD, 0x2B, 0x8B, 0xEE, 0x55, 0xDF, 0x35, 0xE2, 0x02, 0x8C, 0x45, 0xFE, 0xA5, 0x80, 0x61, 0xFC, 0xB0, 0x40, 0x07, 0x00, 0x32, 0xE5, 0x3D, 0xF7, 0x37, 0x4E, 0x71, 0x24, 0x0B, 0xF9, 0x94, 0x71, 0x2E, 0xF1, 0x2F, 0xE7, 0xCC, 0xB9, 0x3F, 0xAC, 0xD7, 0x6C, 0x8E, 0xCA, 0x48, 0x94, 0x96, 0x34, 0xE9, 0x42, 0x60, 0x64, 0x83, 0xF0, 0xD3, 0x62, 0x9A, 0xEF, 0x8F, 0x97, 0x31, 0x6F, 0x3B, 0xED, 0x5D, 0xFD, 0x78, 0x55, 0xDB, 0x7E, 0xD8, 0x55, 0x05, 0xBB, 0x94, 0x63, 0x13, 0xD0, 0xE3, 0x08, 0x4F, 0x80, 0xC0, 0x51, 0x05, 0x0F, 0xEC, 0xCF, 0x45, 0xD7, 0x9F, 0x55, 0x0E, 0x47, 0xE2, 0x7B, 0x39, 0xD8, 0xF2, 0xC4, 0x71, 0xEA, 0x81, 0x32, 0x09, 0xB1, 0x54, 0x44, 0x67, 0x0B, 0x4D, 0x2E, 0xB4, 0x10, 0x2C, 0x80, 0xA8, 0x4F, 0x0B, 0xF9, 0x74, 0x82, 0x00, 0x57, 0x7F, 0x1E, 0x13, 0xDB, 0x7F, 0x0D, 0x77, 0x69, 0xD0, 0x7C, 0x6E, 0x16, 0x73, 0xF1, 0x9E, 0xEF, 0xF6, 0xF3, 0x36, 0x61, 0x08, 0x7F, 0x2C, 0xCA, 0x28, 0x23, 0x9F, 0x39, 0x2E, 0x51, 0x52, 0xD0, 0x36, 0x2E, 0x57, 0xA1, 0x97, 0xC3, 0xB1, 0xDE, 0x4D, 0xA3, 0xB7, 0x50, 0x9C, 0x40, 0x6B, 0x09, 0xBE, 0x37, 0x3C, 0xDC, 0x77, 0x47, 0x76, 0x2D, 0x8C, 0x31, 0x12, 0x5F, 0x7F, 0x9A, 0xE5, 0x02, 0x7E, 0x73, 0xC3, 0x9B, 0xDF, 0x43, 0x70, 0xA7, 0xF9, 0xEB, 0x83, 0x1A, 0xAF, 0x2C, 0x7B, 0xAA, 0xA1, 0x3B, 0x71, 0x1C, 0x12, 0x8D, 0x8D, 0x5D, 0x2B, 0x1C, 0xCA, 0x97, 0xD7, 0x2C, 0x8F, 0x1E, 0xE0, 0x2F, 0x86, 0xD1, 0x22, 0x06, 0xBF, 0x00, 0x72, 0x89, 0x43, 0xD8, 0x2D, 0xCA, 0xBC, 0x9E, 0xF8, 0x46, 0xC7, 0xEA, 0x7A, 0x99, 0x1F, 0xB9, 0xAE, 0xEE, 0xB2, 0x3E, 0xB8, 0xC0, 0x8C, 0x94, 0x6F, 0x14, 0xD9, 0x5C, 0xE6, 0x8C, 0xC0, 0x76, 0x79, 0xE5, 0xAA, 0x1A, 0xBD, 0x81, 0x66, 0x81, 0x36, 0x6E, 0x0F, 0xEE, 0x5C, 0x33, 0xBF, 0xF9, 0x09, 0xB5, 0x78, 0xD2, 0x0A, 0x0E, 0xC6, 0x2D, 0x39, 0x92, 0xB5, 0x21, 0xD0, 0x41, 0xF6, 0x6B, 0x1D, 0xCC, 0x39, 0x4F, 0x11, 0x15, 0x42, 0x16, 0x6B, 0x12, 0x8E, 0xE9, 0x53, 0xB9, 0x22, 0x38, 0xA7, 0x67, 0xB7, 0x0D, 0x23, 0x8B, 0xFC, 0x2B, 0xDB, 0xDD, 0x2C, 0x8A, 0xFD, 0x43, 0x48, 0xE0, 0x12, 0x65, 0x5A, 0xD7, 0xE9, 0xD6, 0xB1, 0x47, 0x4D, 0xAA, 0x3E, 0xCA, 0xEB, 0x28, 0xFB, 0xBD, 0x19, 0x3D, 0xF3, 0x73, 0x69, 0xF8, 0x5A, 0x6A, 0xF3, 0xEC, 0xEC, 0xC4, 0xBF, 0x39, 0xBF, 0x62, 0x1D, 0x03, 0xC3, 0x60, 0xE5, 0x6F, 0xE7, 0x34, 0xE2, 0xEB, 0x55, 0x83, 0xF4, 0xB7, 0x81, 0x6D, 0xC5, 0x18, 0xB8, 0x29, 0x56, 0x8B, 0x90, 0x4B, 0x25, 0xAC, 0x92, 0x2C, 0xAA, 0x9D, 0xC5, 0xAC, 0x84, 0x65, 0x87, 0x8F, 0x84, 0x89, 0xB8, 0x03, 0x18, 0xD1, 0x7A, 0xB1, 0x7A, 0xDD, 0xFA, 0x96, 0x79, 0xF6, 0xAA, 0xF8, 0x6A, 0x03, 0x1D, 0x76, 0x7B, 0x93, 0x5F, 0x3A, 0x2A, 0x34, 0xDC, 0xFA, 0xE5, 0xC0, 0xDB, 0x30, 0x5E, 0x4F, 0x13, 0xEF, 0x00, 0x6E, 0x59, 0x1C, 0xAE, 0x4F, 0x44, 0x10, 0xC6, 0x60, 0x09, 0x55, 0x5F, 0xB1, 0x09, 0xD4, 0x02, 0xB4, 0x66, 0x2B, 0xE9, 0x6E, 0x9A, 0x9A, 0x88, 0x5E, 0x0E, 0xA5, 0xEF, 0xFF, 0x45, 0x0C, 0xC4, 0xB7, 0x2F, 0x50, 0x51, 0x33, 0xF1, 0xD9, 0x60, 0x9B, 0xED, 0x1E, 0xAF, 0x8F, 0xE4, 0x5D, 0xA4, 0xA0, 0xAA, 0xDE, 0x93, 0x1F, 0xD5, 0x58, 0xF7, 0x26, 0x8D, 0x7D, 0xB3, 0x2C, 0xDB, 0xD7, 0x45, 0x9B, 0x05, 0xC1, 0xC0, 0x33, 0x57, 0x6F, 0x76, 0x64, 0x45, 0x17, 0x9C, 0xC1, 0x78, 0x17, 0x5A, 0x7E, 0x41, 0xA9, 0x38, 0x67, 0x02, 0xF7, 0xB3, 0x33, 0x23, 0xC7, 0x29, 0x68, 0xEE, 0xD3, 0x3B, 0x24, 0x9F, 0x88, 0xE8, 0x0B, 0x10, 0x48, 0x42, 0x5F, 0xC7, 0x74, 0x52, 0x15, 0x78, 0x91, 0x4B, 0xE6, 0x3B, 0xE4, 0xEA, 0x99, 0x32, 0x8D, 0x75, 0x35, 0xB6, 0x51, 0x79, 0x2C, 0x98, 0xAD, 0xCE, 0xA8, 0xFB, 0xB7, 0x5D, 0x8C, 0x7B, 0x84, 0xC6, 0x93, 0xE9, 0x29, 0xB3, 0xFD, 0x5B, 0x47, 0x1C, 0x9F, 0xD5, 0x88, 0x3C, 0xF2, 0x2E, 0x42, 0xE5, 0xC1, 0xA5, 0x6D, 0x79, 0x9E, 0x3D, 0x30, 0xD5, 0xC0, 0x82, 0x45, 0xAD, 0xBF, 0xF7, 0x8C, 0x8C, 0x1D, 0x57, 0x94, 0x71, 0x5F, 0x97, 0x3B, 0xF5, 0xA0, 0x5C, 0x4C, 0x2B, 0x04, 0x1E, 0x58, 0x97, 0x54, 0xF0, 0x61, 0x59, 0x88, 0x2F, 0x0E, 0xBB, 0xF7, 0xE7, 0x90, 0x2A, 0xF9, 0x27, 0x69, 0x4E, 0xC7, 0x1B, 0x8C, 0x4C, 0xC9, 0x38, 0x11, 0x98, 0x3F, 0xE4, 0x26, 0xCA, 0x01, 0x4C, 0x57, 0x1E, 0x61, 0x5B, 0x78, 0x53, 0x76, 0xD1, 0x47, 0x86, 0x04, 0x34, 0xEE, 0x58, 0x6C, 0xA6, 0xD3, 0xB6, 0x15, 0xA1, 0xBB, 0x53, 0x19, 0xEA, 0xE5, 0xC6, 0x80, 0x0E, 0x98, 0xC5, 0x7F, 0x3D, 0xE5, 0xAD, 0xB7, 0xA7, 0xC3, 0x42, 0x8C, 0xF7, 0xBA, 0x6E, 0xCD, 0x06, 0xCA, 0xAF, 0x23, 0x3D, 0xA6, 0xFC, 0x3A, 0x72, 0x91, 0xFB, 0x98, 0x0A, 0xB5, 0x0F, 0x2E, 0x7F, 0xB4, 0x72, 0x2D, 0x92, 0xBE, 0x15, 0xC3, 0xB6, 0xA4, 0x0E, 0xB0, 0x6C, 0x43, 0xB2, 0xE3, 0xFC, 0xF2, 0x5B, 0xFD, 0xA1, 0x35, 0x64, 0x38, 0xB2, 0xA6, 0xE7, 0xC7, 0xF6, 0xEC, 0x56, 0xDD, 0xCD, 0x7E, 0xD8, 0x0A, 0x5C, 0x1B, 0x06, 0x8A, 0x01, 0xC0, 0xCF, 0x58, 0x1C, 0x16, 0xF3, 0x82, 0x81, 0x8D, 0x80, 0xEB, 0x27, 0x51, 0xAC, 0xB1, 0x4C, 0xF7, 0x85, 0x4A, 0xF4, 0x1C, 0xF0, 0x70, 0x97, 0xF5, 0xA2, 0x17, 0xDE, 0xA6, 0x77, 0xD6, 0x90, 0xA8, 0x8E, 0x4D, 0x6E, 0xFF, 0x7D, 0xC3, 0x7B, 0x39, 0xC6, 0x28, 0x20, 0x27, 0x13, 0x8D, 0x02, 0xA0, 0x6F, 0x84, 0x14, 0x84, 0xAC, 0x63, 0x13, 0xE8, 0x9B, 0x15, 0x7B, 0x1D, 0x73, 0x8D, 0x3E, 0xAD, 0xA7, 0xAD, 0xC9, 0x95, 0x6C, 0x64, 0x19, 0x1A, 0xD9, 0xC1, 0x81, 0xA0, 0x48, 0x11, 0xBB, 0xEF, 0xC0, 0x94, 0x74, 0x5B, 0x70, 0x11, 0x5D, 0x6C, 0xB6, 0xD2, 0xF1, 0x45, 0x47, 0x97, 0x30, 0x92, 0xBF, 0x14, 0x45, 0x8F, 0xD8, 0xF2, 0x0E, 0x3D, 0x2A, 0xE5, 0x97, 0x8C, 0x82, 0xDC, 0x35, 0xCA, 0x31, 0xE4, 0xA5, 0x38, 0x46, 0x15, 0x78, 0xDF, 0xB9, 0x01, 0xE0, 0x82, 0xA7, 0xE8, 0x8B, 0xE3, 0x60, 0x4D, 0x71, 0x01, 0xDF, 0x2F, 0x24, 0xEB, 0xC8, 0xE0, 0x6E, 0x6E, 0x38, 0x66, 0x4B, 0x8F, 0xDA, 0x1D, 0x7D, 0x88, 0x00, 0x20, 0x61, 0x52, 0x8C, 0x37, 0x90, 0xAD, 0x78, 0x23, 0xFE, 0xD6, 0x39, 0x81, 0xF3, 0x61, 0x73, 0x46, 0x21, 0x67, 0x71, 0xAC, 0x3A, 0x69, 0x35, 0x9F, 0x34, 0x2E, 0x74, 0x7E, 0x4A, 0x11, 0x1B, 0x11, 0x51, 0x95, 0xEF, 0xFA, 0xDF, 0x1A, 0x1E, 0xEB, 0xE9, 0x59, 0x94 };


        //Set DWORD At
        private void SetDWAt(ref byte[] content, uint pos, uint val) {
            byte[] DW = BitConverter.GetBytes(val);
            if (!BitConverter.IsLittleEndian)
                Array.Reverse(DW, 0, 4);
            DW.CopyTo(content, pos);
        }

        //Get DWord At
        public uint GetDW(byte[] Arr, uint Pos) {
            byte[] DW = new byte[] { Arr[Pos], Arr[Pos + 1], Arr[Pos + 2], Arr[Pos + 3]};
            if (!BitConverter.IsLittleEndian)
                Array.Reverse(DW, 0, 4);
            return BitConverter.ToUInt32(DW, 0);
        }
        
    }
}
